Javascript Testing 1

Describe the "system under test"
Describe arrange, act and assert phases of a test
Differentiate between unit, integration, e2e and acceptance testing
Able to write and run unit tests in javascript
Able to demonstrate a failing test that fails "for the right reason"
Able to make a previously failing test to pass
Has written at least 20 unit tests
Can include meaningful assertions in unit tests
Can write and run an integration test

-----------------------------------------------
Javascript Testing 2


1. Can set up test runner and initial tests from scratch DONE
============================================================
2. Discuss why mocking is necessary in testing

Mocking is a process used in unit testing when the unit being tested has 
external dependencies. The purpose of mocking is to isolate and focus on 
the code being tested and not on the behavior or state of external dependencies. 
In mocking, the dependencies are replaced by closely controlled replacements 
objects that simulate the behavior of the real ones. There are three main possible 
types of replacement objects - fakes, stubs and mocks.

Fakes: A Fake is an object that will replace the actual code by implementing the 
same interface but without interacting with other objects. Usually the Fake is 
hard-coded to return fixed results. To test for different use cases, a lot of Fakes 
must be introduced. The problem introduced by using Fakes is that when an interface 
has been modified, all fakes implementing this interface should be modified as well.

Stubs: A Stub is an object that will return a specific result based on a specific 
set of inputs and usually wonâ€™t respond to anything outside of what is programed 
for the test. With JustMock you can create a Stub in a test with a minimal amount 
of code, making it clear how the dependency will respond and how the tested system 
should behave.

Mocks: A Mock is a much more sophisticated version of a Stub. It will still return 
values like a Stub, but it can also be programmed with expectations in terms of how 
many times each method should be called, in which order and with what data. 
With JustMock you can create a Mock with just one line of code, which makes the test 
more understandable.

============================================================
3. Able to mock internal and external modules to keep unit tests isolated

4. Can use fakes or mocks to impersonate functionality from dependent services 
(ex: 3rd party API) DONE?

============================================================
5. Discuss what unit test coverage demonstrates

Code coverage means measuring how much of your code is executed during 
your unit tests. Basically, that means that after running your unit tests, 
you get a report showing you how many percent of the code that was executed 
during the tests, and also what lines precisely that were executed.

With the code coverage report in hand, you can analyse what parts of your code 
that was not run, and modify your unit tests so these parts of the code are executed.

The larger the coverage, the closer to 100%, that is, the better chances you have 
of having bug free code. Having a 100% code coverage though, is not a guarantee that 
your code is bug free. For instance, code coverage does not guard against bugs that 
are caused by incorrect implementations of the requirements. The code may work just 
fine, but if it's not what the client asked for, it's still a bug.

============================================================
6. Can generate coverage report.
============================================================
7. Can test async functions DONE
============================================================
8. Can write and run an E2E test.